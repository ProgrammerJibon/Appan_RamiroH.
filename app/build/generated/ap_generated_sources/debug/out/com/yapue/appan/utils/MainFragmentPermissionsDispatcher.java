// This file was generated by PermissionsDispatcher. Do not modify!
package com.yapue.appan.utils;

import androidx.core.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class MainFragmentPermissionsDispatcher {
  private static final int REQUEST_CROPIMAGE = 0;

  private static final String[] PERMISSION_CROPIMAGE = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private static final int REQUEST_PICKIMAGE = 1;

  private static final String[] PERMISSION_PICKIMAGE = new String[] {"android.permission.READ_EXTERNAL_STORAGE"};

  private MainFragmentPermissionsDispatcher() {
  }

  static void pickImageWithPermissionCheck(MainFragment target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_PICKIMAGE)) {
      target.pickImage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_PICKIMAGE)) {
        target.showRationaleForPick(new MainFragmentPickImagePermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_PICKIMAGE, REQUEST_PICKIMAGE);
      }
    }
  }

  static void cropImageWithPermissionCheck(MainFragment target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_CROPIMAGE)) {
      target.cropImage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_CROPIMAGE)) {
        target.showRationaleForCrop(new MainFragmentCropImagePermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_CROPIMAGE, REQUEST_CROPIMAGE);
      }
    }
  }

  static void onRequestPermissionsResult(MainFragment target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_PICKIMAGE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.pickImage();
      }
      break;
      case REQUEST_CROPIMAGE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.cropImage();
      }
      break;
      default:
      break;
    }
  }

  private static final class MainFragmentPickImagePermissionRequest implements PermissionRequest {
    private final WeakReference<MainFragment> weakTarget;

    private MainFragmentPickImagePermissionRequest(MainFragment target) {
      this.weakTarget = new WeakReference<MainFragment>(target);
    }

    @Override
    public void proceed() {
      MainFragment target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_PICKIMAGE, REQUEST_PICKIMAGE);
    }

    @Override
    public void cancel() {
    }
  }

  private static final class MainFragmentCropImagePermissionRequest implements PermissionRequest {
    private final WeakReference<MainFragment> weakTarget;

    private MainFragmentCropImagePermissionRequest(MainFragment target) {
      this.weakTarget = new WeakReference<MainFragment>(target);
    }

    @Override
    public void proceed() {
      MainFragment target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_CROPIMAGE, REQUEST_CROPIMAGE);
    }

    @Override
    public void cancel() {
    }
  }
}
